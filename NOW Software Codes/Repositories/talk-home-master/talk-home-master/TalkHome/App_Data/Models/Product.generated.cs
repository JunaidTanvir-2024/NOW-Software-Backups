//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Product</summary>
	[PublishedContentModel("product")]
	public partial class Product : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "product";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Product(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Product, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Category: Select the category.
		///</summary>
		[ImplementPropertyType("category")]
		public string Category
		{
			get { return this.GetPropertyValue<string>("category"); }
		}

		///<summary>
		/// DataOffer
		///</summary>
		[ImplementPropertyType("doubleData")]
		public bool DoubleData
		{
			get { return this.GetPropertyValue<bool>("doubleData"); }
		}

		///<summary>
		/// Home country: Select the country the bundle is active for.
		///</summary>
		[ImplementPropertyType("homeCountry")]
		public int HomeCountry
		{
			get { return this.GetPropertyValue<int>("homeCountry"); }
		}

		///<summary>
		/// Offer  Multiple
		///</summary>
		[ImplementPropertyType("offerMultiple")]
		public int OfferMultiple
		{
			get { return this.GetPropertyValue<int>("offerMultiple"); }
		}

		///<summary>
		/// Buy via SMS: Enter the code and the number for buying via SMS (if applicable).
		///</summary>
		[ImplementPropertyType("productBuyViaSms")]
		public string ProductBuyViaSms
		{
			get { return this.GetPropertyValue<string>("productBuyViaSms"); }
		}

		///<summary>
		/// Data: Enter the data available (if applicable).
		///</summary>
		[ImplementPropertyType("productData")]
		public Newtonsoft.Json.Linq.JToken ProductData
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("productData"); }
		}

		///<summary>
		/// Destination: Select the destinations the product applies to.
		///</summary>
		[ImplementPropertyType("productDestinations")]
		public object ProductDestinations
		{
			get { return this.GetPropertyValue("productDestinations"); }
		}

		///<summary>
		/// Duration: Enter the duration of the product (if applicable).
		///</summary>
		[ImplementPropertyType("productDuration")]
		public string ProductDuration
		{
			get { return this.GetPropertyValue<string>("productDuration"); }
		}

		///<summary>
		/// Long description: Enter the product description (if applicable).
		///</summary>
		[ImplementPropertyType("productLongDescription")]
		public string ProductLongDescription
		{
			get { return this.GetPropertyValue<string>("productLongDescription"); }
		}

		///<summary>
		/// Minutes: Enter the amount of minutes (if applicable).
		///</summary>
		[ImplementPropertyType("productMinutes")]
		public string ProductMinutes
		{
			get { return this.GetPropertyValue<string>("productMinutes"); }
		}

		///<summary>
		/// Name: Enter the name of the product.
		///</summary>
		[ImplementPropertyType("productName")]
		public string ProductName
		{
			get { return this.GetPropertyValue<string>("productName"); }
		}

		///<summary>
		/// Price: Enter the product price.
		///</summary>
		[ImplementPropertyType("productPrice")]
		public int ProductPrice
		{
			get { return this.GetPropertyValue<int>("productPrice"); }
		}

		///<summary>
		/// SMS: Enter the number of SMS (if applicable).
		///</summary>
		[ImplementPropertyType("productSMS")]
		public string ProductSms
		{
			get { return this.GetPropertyValue<string>("productSMS"); }
		}

		///<summary>
		/// Top product: Select whether this should be shown as a Top product
		///</summary>
		[ImplementPropertyType("productTopProduct")]
		public bool ProductTopProduct
		{
			get { return this.GetPropertyValue<bool>("productTopProduct"); }
		}

		///<summary>
		/// UUID: Enter the product unique identifier code.
		///</summary>
		[ImplementPropertyType("productUUID")]
		public string ProductUuid
		{
			get { return this.GetPropertyValue<string>("productUUID"); }
		}

		///<summary>
		/// Sub-name: Enter the part of the name rendered with the custom typeface.
		///</summary>
		[ImplementPropertyType("subName")]
		public string SubName
		{
			get { return this.GetPropertyValue<string>("subName"); }
		}
	}
}
